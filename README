# Stateless AWS Web Application Deployment on Container Orchestration

Welcome to the project repository for deploying a stateless web application on AWS utilizing container orchestration. This project focuses on achieving high resilience, security, and fault tolerance.

## Objective

The objective of this project is to design and deploy a stateless web application on AWS utilizing container orchestration, ensuring high resilience, security, and fault tolerance.

## Architecture Overview

This section outlines the architectural requirements and objectives for the deployment of a static website on ECS:

- **Functionality and Features:** Define the features required for the website.
- **User Flow:** Describe the expected user flow and interaction points.
- **Security Measures:** Specify security measures such as IAM roles, encryption, and access controls.
- **Scalability:** Define scalability requirements to handle varying levels of traffic.

## Application Development

This section covers the development of a simple static website with two landing pages using HTML:

- **HTML Files:** HTML files for the landing pages with relevant content.
- **Design:** Keep the design minimalistic and focused on delivering the intended information.
- **Compatibility:** Ensure cross-browser compatibility and responsive design for various devices.

## Containerization with Docker

This section explains the process of containerizing the web application using Docker:

- **EC2 Instance Setup:** Set up an EC2 instance and install Docker for containerization.
- **Dockerfile:** Define the environment and dependencies for running the web application.
- **Containerization:** Copy the HTML files into the Docker container.
- **Verification:** Build the Docker image and run a container instance to verify functionality.

## Amazon ECR Configuration

This section covers the configuration of Amazon Elastic Container Registry (ECR) to store the Docker image:

- **AWS CLI Configuration:** Configure AWS CLI and authenticate with your AWS account.
- **Tagging and Pushing:** Tag the Docker image with the ECR repository URI and push it to the designated repository.

## Infrastructure Coding with Terraform

This section explains the provisioning of infrastructure resources using Terraform:

- ## Infrastructure Coding with Terraform

This section explains the provisioning of infrastructure resources using Terraform:

- **Terraform Scripts:** Terraform scripts were written to define various infrastructure components required for the deployment:
  - **ECS Cluster:** Provisioned an ECS cluster to manage containerized applications.
  - **ECR Repository:** Created an Elastic Container Registry repository to store Docker images.
  - **Load Balancer:** Configured a public load balancer to distribute traffic to the ECS cluster.
  - **Security Groups:** Defined security groups to control inbound and outbound traffic to the ECS instances.
  - **IAM Roles:** Specified IAM roles with appropriate permissions for ECS tasks.

## Additional Instructions

- Make sure to review and adjust your security group settings according to your specific security requirements.
- Ensure that subnets and security groups specified in ALB and ECS configurations allow inbound and outbound traffic as necessary.

- Verify that health checks for ECS service and target group are configured correctly.
- Ensure instances are healthy and able to serve traffic.
- If using EC2 instances with ECS, ensure they're running and healthy in the ECS cluster.
- Check logs and metrics provided by AWS (e.g., CloudWatch logs, ALB access logs, ECS container logs) for errors or issues aiding diagnosis.
- Test the Terraform scripts locally and deploy the infrastructure to AWS.

## 
